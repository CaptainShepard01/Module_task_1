#include <stdio.h>
#include <iostream>
#include "MyLib.h"
using namespace std;

/*Begin6. Даны длины ребер a, b, c прямоугольного параллелепипеда. Найти его
объем V = a·b·c и площадь поверхности S = 2·(a·b + b·c + a·c). */

void begin6()
{
	setlocale(LC_CTYPE, "Russian");
	float a, b, c;
	cout << "Begin6. Даны длины ребер a, b, c прямоугольного параллелепипеда. Найти его" << endl;
	cout << "объем V = a·b·c и площадь поверхности S = 2·(a·b + b·c + a·c)." << endl;
	cout << "Ребрa куба: " << endl;
	cout << "a = ";
	cin >> a;
	cout << "b = ";
	cin >> b;
	cout << "c = ";
	cin >> c;
	int V = a * b * c;
	int S = 2 * (a * b + b * c + a * c);
	cout << "V = " << V << endl << "S = " << S << endl << endl;
}

/*Begin16.Найти расстояние между двумя точками с заданными координатами
x1 и x2 на числовой оси : | x2 – x1 | .*/

void begin16()
{
	float x1, x2, d;
	cout << "Begin16.Найти расстояние между двумя точками с заданными координатами" << endl;
	cout << "x1 и x2 на числовой оси : | x2 – x1 | ." << endl;
	cout << "x1 = ";
	cin >> x1;
	cout << "x2 = ";
	cin >> x2;
	d = x2 - x1;
	cout << "| x2 – x1 | = " << abs(d) << endl << endl;
}

/*Begin19. Даны координаты двух противоположных вершин прямоугольника:
(x1, y1), (x2, y2). Стороны прямоугольника параллельны осям координат.
Найти периметр и площадь данного прямоугольника. */

void begin19()
{
	float x1, x2, y1, y2, P, S, a, b;
	cout << "Begin19. Даны координаты двух противоположных вершин прямоугольника:" << endl;
	cout << "(x1, y1), (x2, y2). Стороны прямоугольника параллельны осям координат." << endl;
	cout << "Найти периметр и площадь данного прямоугольника." << endl;
	cout << "x1 = ";
	cin >> x1;
	cout << "y1 = ";
	cin >> y1;
	cout << "x2 = ";
	cin >> x2;
	cout << "y2 = ";
	cin >> y2;
	a = abs(x1 - x2);
	b = abs(y1 - y2);
	P = (a + b) * 2;
	S = a * b;
	cout << "P = " << P << endl << "S = " << S << endl << endl;
}

/*Begin26. Найти значение функции y = 4·(x–3)6 – 7·(x–3)3 + 2 при данном значе-
нии x. */

void begin26()
{
	float x, y, z;
	cout << "Begin26. Найти значение функции y = 4·(x–3)6 – 7·(x–3)3 + 2" << endl;
	cout << "при данном значении x." << endl;
	cout << "x = ";
	cin >> x;
	z = (x - 3) * (x - 3) * (x - 3);
	y = 4 * z * z - 7 * z + 2;
	cout << "y = " << y << endl << endl;
}

/*Begin27°.Дано число A.Вычислить A8, используя вспомогательную перемен -
ную и три операции умножения.Для этого последовательно находить A^2,
A^4, A^8.Вывести все найденные степени числа A.*/

void begin27()
{
	float A, B;
	cout << "Begin27°.Дано число A.Вычислить A8, используя вспомогательную переменную и три операции умножения." << endl;
	cout << "Для этого последовательно находить A^2, A^4, A^8.Вывести все найденные степени числа A." << endl;
	cout << "A = ";
	cin >> A;
	B = A * A;
	cout << "A^2 = " << B << endl;
	B = B * B;
	cout << "A^4 = " << B << endl;
	B = B * B;
	cout << "A^8 = " << B << endl << endl;
}

/*Begin40. Найти решение системы линейных уравнений вида
A1·x + B1·y = C1,
A2·x + B2·y = C2,
заданной своими коэффициентами A1, B1, C1, A2, B2, C2, если известно, что
данная система имеет единственное решение. Воспользоваться формулами
x = (C1·B2 – C2·B1)/D, y = (A1·C2 – A2·C1)/D,
где D = A1·B2 – A2·B1. */

void begin40()
{
	setlocale(LC_CTYPE, "Russian");
	float A1, A2, B1, B2, C1, C2, x, y, D;
	cout << "Begin40. Найти решение системы линейных уравнений вида" << endl;
	cout << "A1·x + B1·y = C1," << endl;
	cout << "A2·x + B2·y = C2," << endl; 
	cout << "заданной своими коэффициентами A1, B1, C1, A2, B2, C2, если известно," << endl;
	cout << "что данная система имеет единственное решение.Воспользоваться формулами" << endl;
	cout << "x = (C1·B2 – C2·B1)/D, y = (A1·C2 – A2·C1)/D, где D = A1·B2 – A2·B1." << endl;
	cout << "A1 = ";
	cin >> A1;
	cout << "A2 = ";
	cin >> A2;
	cout << "B1 = ";
	cin >> B1;
	cout << "B2 = ";
	cin >> C1;
	cout << "C1 = ";
	cin >> C2;
	cout << "C2 = ";
	cin >> B2;
	D = A1 * B2 - A2 * B1;
	if (D != 0)
	{
		x = (C1 * B2 - C2 * B1) / D;
		y = (A1 * C2 - A2 * C1) / D;
		cout << "x = " << x << " " << "y = " << y << endl;
	}
	else cout << "Нет решений в действительных числах" << endl << endl;
}